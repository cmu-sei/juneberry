#! /usr/bin/env python3

# ======================================================================================================================
#  Copyright 2021 Carnegie Mellon University.
#
#  NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS"
#  BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER
#  INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED
#  FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM
#  FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
#
#  Released under a BSD (SEI)-style license, please see license.txt or contact permission@sei.cmu.edu for full terms.
#
#  [DISTRIBUTION STATEMENT A] This material has been approved for public release and unlimited distribution.
#  Please see Copyright notice for non-US Government use and distribution.
#
#  This Software includes and/or makes use of the following Third-Party Software subject to its own license:
#
#  1. PyTorch (https://github.com/pytorch/pytorch/blob/master/LICENSE) Copyright 2016 facebook, inc..
#  2. NumPY (https://github.com/numpy/numpy/blob/master/LICENSE.txt) Copyright 2020 Numpy developers.
#  3. Matplotlib (https://matplotlib.org/3.1.1/users/license.html) Copyright 2013 Matplotlib Development Team.
#  4. pillow (https://github.com/python-pillow/Pillow/blob/master/LICENSE) Copyright 2020 Alex Clark and contributors.
#  5. SKlearn (https://github.com/scikit-learn/sklearn-docbuilder/blob/master/LICENSE) Copyright 2013 scikit-learn
#      developers.
#  6. torchsummary (https://github.com/TylerYep/torch-summary/blob/master/LICENSE) Copyright 2020 Tyler Yep.
#  7. pytest (https://docs.pytest.org/en/stable/license.html) Copyright 2020 Holger Krekel and others.
#  8. pylint (https://github.com/PyCQA/pylint/blob/main/LICENSE) Copyright 1991 Free Software Foundation, Inc..
#  9. Python (https://docs.python.org/3/license.html#psf-license) Copyright 2001 python software foundation.
#  10. doit (https://github.com/pydoit/doit/blob/master/LICENSE) Copyright 2014 Eduardo Naufel Schettino.
#  11. tensorboard (https://github.com/tensorflow/tensorboard/blob/master/LICENSE) Copyright 2017 The TensorFlow
#                  Authors.
#  12. pandas (https://github.com/pandas-dev/pandas/blob/master/LICENSE) Copyright 2011 AQR Capital Management, LLC,
#             Lambda Foundry, Inc. and PyData Development Team.
#  13. pycocotools (https://github.com/cocodataset/cocoapi/blob/master/license.txt) Copyright 2014 Piotr Dollar and
#                  Tsung-Yi Lin.
#  14. brambox (https://gitlab.com/EAVISE/brambox/-/blob/master/LICENSE) Copyright 2017 EAVISE.
#  15. pyyaml  (https://github.com/yaml/pyyaml/blob/master/LICENSE) Copyright 2017 Ingy dÃ¶t Net ; Kirill Simonov.
#  16. natsort (https://github.com/SethMMorton/natsort/blob/master/LICENSE) Copyright 2020 Seth M. Morton.
#  17. prodict  (https://github.com/ramazanpolat/prodict/blob/master/LICENSE.txt) Copyright 2018 Ramazan Polat
#               (ramazanpolat@gmail.com).
#  18. jsonschema (https://github.com/Julian/jsonschema/blob/main/COPYING) Copyright 2013 Julian Berman.
#
#  DM21-0689
#
# ======================================================================================================================

import argparse
import brambox as bb
import csv
import json
import logging
import matplotlib.pyplot as plt
from pathlib import Path

import juneberry.filesystem as jbfs
import juneberry.scripting as jbscripting

from juneberry.metrics.metrics import Metrics, PrecisionRecallPlot, PrecisionConfidencePlot, RecallConfidencePlot

from typing import List

logger = logging.getLogger("juneberry.jb_plot_pr")


def setup_args(parser) -> None:
    """
    Adds arguments to the parser
    :param parser: The parser in which to add arguments.
    """
    parser.add_argument('-m', '--model', action='append', required=True,
                        help="The name of a model to generate curves for. You may provide this argument any number of "
                             "times to add multiple curves to the figures, however each model argument must be paired "
                             "with a data argument. The figure will begin to repeat line colors if more than ten "
                             "curves are added to the plot.")
    parser.add_argument('-e', '--evalData', action='append', required=True,
                        help="The name of a dataset that was used to evaluate the model. In order for a curve to be "
                             "added to the figure, a model must be paired with a dataset.")
    parser.add_argument('--iou', type=float, default=0.5,
                        help="The IoU threshold to use when determining whether to count a detection as a true "
                             "positive.")
    parser.add_argument('--outputDir', default=None,
                        help="Directory where figures will be saved. If this field is left unspecified, the figures "
                             "will be saved to the current working directory.")


def main():
    parser = argparse.ArgumentParser(description='This script consumes the output from jb_evaluate_data to create '
                                                 'three figures: a Precision-Recall curve, a Precision-Confidence '
                                                 'curve, and a Recall-Confidence curve. A curve in each figure will be '
                                                 'generated for each pair of {model, eval datasets} provided in the '
                                                 'args to this script.')
    setup_args(parser)
    jbscripting.setup_args(parser)
    args = parser.parse_args()

    # If an output directory was not provided, default to the current working directory.
    output_dir = Path.cwd() if args.outputDir is None else Path(args.outputDir)
    if not output_dir.exists():
        output_dir.mkdir(parents=True)

    logger.info(f"Starting to generate PR, PC, and RC curves...")

    metrics: List[Metrics] = []
    model_mgr = None
    eval_dir_mgr = None

    for idx, val in enumerate(args.model):
        model_mgr = jbfs.ModelManager(args.model[idx])
        eval_dir_mgr = model_mgr.get_eval_dir_mgr(args.evalData[idx])
        metrics.append(
            Metrics.create_with_filesystem_managers(model_mgr,
                                                    eval_dir_mgr,
                                                    iou_threshold=args.iou))

    pr_plot = PrecisionRecallPlot()
    pc_plot = PrecisionConfidencePlot()
    rc_plot = RecallConfidencePlot()

    pr_plot.add_metrics_list(metrics)
    pc_plot.add_metrics_list(metrics)
    rc_plot.add_metrics_list(metrics)

    Metrics.export(metrics)


if __name__ == "__main__":
    main()
