#! /usr/bin/env python3

# ======================================================================================================================
# Juneberry - General Release
#
# Copyright 2021 Carnegie Mellon University.
#
# NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS"
# BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER
# INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED
# FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM
# FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
#
# Released under a BSD (SEI)-style license, please see license.txt or contact permission@sei.cmu.edu for full terms.
#
# [DISTRIBUTION STATEMENT A] This material has been approved for public release and unlimited distribution.  Please see
# Copyright notice for non-US Government use and distribution.
#
# This Software includes and/or makes use of Third-Party Software subject to its own license.
#
# DM21-0884
#
# ======================================================================================================================

"""
This script cleans all of the predictions files produced by jb_evaluate.

"""

import argparse
from pathlib import Path
import subprocess

from juneberry.config.rule_list import RulesList


def main():
    parser = argparse.ArgumentParser(description="Clean the predictions files produced by an experiment.")
    parser.add_argument("experimentName", help='Name of experiment.')
    args = parser.parse_args()

    # TODO: use normal script start-up to get the workspace and data roots
    workspace_root = Path(__file__).parents[1].absolute()
    json_path = workspace_root / 'experiments' / args.experimentName / 'rules.json'
    experiments_dir = workspace_root / 'experiments' / args.experimentName / 'main_dodo.py'

    rules = RulesList.load(json_path)

    tasks = []
    for workflow in rules.workflows:
        for rule in workflow.rules:
            if rule.command[0] == "jb_evaluate":
                tasks.append(rule.id)

    for task in tasks:
        cmd = ["doit", "-f", experiments_dir, "--dir", workspace_root, "clean", str(task)]
        subprocess.run(cmd)


if __name__ == "__main__":
    main()
