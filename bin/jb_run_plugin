#! /usr/bin/env python3

# ======================================================================================================================
# Juneberry - General Release
#
# Copyright 2021 Carnegie Mellon University.
#
# NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS"
# BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER
# INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED
# FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM
# FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
#
# Released under a BSD (SEI)-style license, please see license.txt or contact permission@sei.cmu.edu for full terms.
#
# [DISTRIBUTION STATEMENT A] This material has been approved for public release and unlimited distribution.  Please see
# Copyright notice for non-US Government use and distribution.
#
# This Software includes and/or makes use of Third-Party Software subject to its own license.
#
# DM21-0884
#
# ======================================================================================================================

import argparse
import logging
import sys

from juneberry.filesystem import load_json
import juneberry.loader as jbloader
import juneberry.scripting as jbscripting

logger = logging.getLogger("juneberry.jb_run_plugin")


def run_plugin(plugin: str):
    """
    This function is responsible for constructing an instance of the desired plugin and then calling it.
    :param plugin: A string describing the location in the filesystem of the JSON file
    containing the plugin information.
    :return: Nothing.
    """
    # Retrieve the data from the JSON file.
    json = load_json(plugin)

    if 'fqcn' not in json:
        logger.error(f"Expected key 'fqcn' in target plugin JSON file was not found. EXITING.")
        sys.exit(-1)

    if 'kwargs' not in json:
        json['kwargs'] = {}

    # Construct an instance of the class described in the plugin file.
    plugin_obj = jbloader.construct_instance(json['fqcn'], json['kwargs'])

    # Call the instance of the class (run the plugin).
    plugin_obj()


def setup_args(parser) -> None:
    """
    Adds arguments to the parser
    :param parser: The parser in which to add arguments.
    """
    parser.add_argument('pluginFile', help='A JSON file containing the name of the class representing the desired '
                                           'plugin to run, along with any kwargs to pass to the instance.')


def main():
    # Setup and parse all arguments.
    parser = argparse.ArgumentParser(description="")
    setup_args(parser)
    jbscripting.setup_args(parser)
    args = parser.parse_args()

    # Set up logging.
    jbscripting.setup_logging_for_script(args)

    # Run the plugin.
    run_plugin(args.pluginFile)

    logger.info(f"jb_run_plugin is done.")


if __name__ == "__main__":
    main()
