#! /usr/bin/env python3

# ======================================================================================================================
# Juneberry - General Release
#
# Copyright 2021 Carnegie Mellon University.
#
# NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS"
# BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER
# INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED
# FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM
# FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
#
# Released under a BSD (SEI)-style license, please see license.txt or contact permission@sei.cmu.edu for full terms.
#
# [DISTRIBUTION STATEMENT A] This material has been approved for public release and unlimited distribution.  Please see
# Copyright notice for non-US Government use and distribution.
#
# This Software includes and/or makes use of Third-Party Software subject to its own license.
#
# DM21-0884
#
# ======================================================================================================================

import argparse
import logging
import sys

import juneberry.filesystem as jbfs
import juneberry.loader as jb_loader
import juneberry.scripting as jbscripting

logger = logging.getLogger("juneberry.jb_train")


def setup_args(parser) -> None:
    """
    Adds arguments to the parser
    :param parser: The parser in which to add arguments.
    """
    parser.add_argument('modelName', help='Name of the directory in models containing the \'config.json\' in '
                                          'workspace models directory.')
    parser.add_argument('--dryrun', default=False, action='store_true',
                        help='Flag to initiate dry run mode. ')
    # parser.add_argument('--nopaging', default=False, action='store_true',
    #                     help='Set to true to disable data set paging and load all at once.')
    parser.add_argument('-n', '--num-gpus', type=int, default=None, help='The number of gpus. By default use all.'
                                                                         'Set to 0 for cpu.')


def main():
    # Setup and parse all arguments.
    parser = argparse.ArgumentParser(description="Performs the training defined in a Juneberry model "
                                                 "configuration file.")
    setup_args(parser)
    jbscripting.setup_args(parser)
    args = parser.parse_args()

    # The model manager helps us find all the files and directories
    model_name = args.modelName
    model_manager = jbfs.ModelManager(args.modelName)
    model_manager.setup()

    # Use the config file to set up the workspace, data and logging
    log_prefix = ""
    log_file = model_manager.get_training_log()
    if args.dryrun:
        log_prefix = "<<DRY_RUN>> "
        log_file = model_manager.get_training_dryrun_log_path()
    lab = jbscripting.setup_for_single_model(args, log_file=log_file, log_prefix=log_prefix, model_name=model_name,
                                             banner_msg=">>> Juneberry Trainer <<<")

    # Convert the verbose argument to the corresponding logging level.
    log_level = logging.DEBUG if args.verbose else logging.INFO

    # Kick off the logging
    logger.info(f"Beginning training with model: {model_name}")

    # Load the config files, check and aggregate configuration options
    logger.info(f"Loading model config for model {model_name} files...")
    model_config = lab.load_model_config(model_name)

    logger.info(f"Loading dataset for {model_config.training_dataset_config_path} files...")
    dataset_config = lab.load_dataset_config(model_config.training_dataset_config_path)

    max_gpus = None
    if model_config.hints is not None:
        if 'num_workers' in model_config.hints.keys():
            num_workers = model_config.hints.num_workers
            logger.warning(f"Overriding number of workers. Found {num_workers} in ModelConfig")
            lab.num_workers = num_workers
        if 'max_gpus' in model_config.hints.keys():
            max_gpus = model_config.hints.max_gpus
            lab.max_gpus = max_gpus

    # TODO: Reimplement no_paging via lab

    # Backward compatible map of task and platform name to class to load
    task_platform_map = {
        "classification": {
            "pytorch": "juneberry.pytorch.classifier_trainer.ClassifierTrainer",
            "pytorch_privacy": "juneberry.pytorch.privacy.classifier_trainer.PrivacyTrainer",
            "tensorflow": "juneberry.tensorflow.trainer.ClassifierTrainer",
            "tfgloro": "juneberry.tensorflow.trainer.ClassifierTrainer"
        },
        "objectDetection": {
            "detectron2": "juneberry.detectron2.dt2_trainer.Detectron2Trainer",
            "mmdetection": "juneberry.mmdetection.mmd_trainer.MMDTrainer"
        }
    }

    if model_config.trainer is not None:
        kw_args = model_config.trainer.kwargs
        if kw_args is None:
            kw_args = {}
        fqcn = model_config.trainer.fqcn
    else:
        # Dig through our map of tasks and platforms
        if model_config.task not in task_platform_map:
            logger.error(f"We do not support the task '{model_config.task}'. "
                         f"Supported tasks: {list(task_platform_map.keys())}. EXITING.")
            sys.exit(-1)
        else:
            task_set = task_platform_map[model_config.task]
            if model_config.platform not in task_set:
                logger.error(f"We do not support the platform '{model_config.platform}' in task '{model_config.task}'. "
                             f"Supported platforms: {list(task_set.keys())}. EXITING.")
                sys.exit(-1)
            fqcn = task_platform_map[model_config.task][model_config.platform]
        kw_args = {}
        logger.warning("Found deprecated platform/task configuration for loading trainer. "
                       "Consider updating the model config to use the trainer stanza.")
        logger.warning('"trainer": {')
        logger.warning(f'    "fqcn": "{fqcn}"')
        logger.warning('}')

    reqd_args = ['lab', 'model_manager', 'model_config', 'dataset_config', 'log_level']

    # If kw_args doesn't contain a required arg, substitute in the local variable for that kw_arg.
    for arg in reqd_args:
        if arg not in kw_args:
            kw_args[arg] = locals()[arg]

    # Construct the trainer
    logger.info(f"Instantiating trainer: {fqcn}")
    trainer = jb_loader.construct_instance(fqcn, kw_args)

    if trainer is None:
        logger.error("No Trainer instantiated for configuration.  EXITING.")
        sys.exit(-1)

    if args.dryrun:
        trainer.dry_run()
    else:
        # Allocate the gpus the user asked for, getting the current number if None are required.
        trainer.num_gpus = trainer.check_gpu_availability(args.num_gpus)

        if max_gpus is not None and trainer.num_gpus > max_gpus:
            trainer.num_gpus = max_gpus
            logger.warning(f"Overriding number of gpus. Found max_gpus {max_gpus} in ModelConfig hints.")

        # No matter the number of gpus, setup the node for training
        trainer.node_setup()

        # Set the number of gpus and kick it off
        if trainer.num_gpus == 0:
            trainer.train_model()
        elif trainer.num_gpus == 1:
            # With one gpu we just run on the gpu in this process
            trainer.train_model(0)
        else:
            trainer.train_distributed(trainer.num_gpus)


if __name__ == "__main__":
    jbscripting.run_main(main, logger)
