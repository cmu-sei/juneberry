#! /usr/bin/env python3

# ======================================================================================================================
# Juneberry - General Release
#
# Copyright 2021 Carnegie Mellon University.
#
# NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS"
# BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER
# INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED
# FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM
# FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
#
# Released under a BSD (SEI)-style license, please see license.txt or contact permission@sei.cmu.edu for full terms.
#
# [DISTRIBUTION STATEMENT A] This material has been approved for public release and unlimited distribution.  Please see
# Copyright notice for non-US Government use and distribution.
#
# This Software includes and/or makes use of Third-Party Software subject to its own license.
#
# DM21-0884
#
# ======================================================================================================================

import argparse
import logging

from juneberry.scripting.sprout import TrainingSprout
import juneberry.scripting.utils as jb_scripting_utils

logger = logging.getLogger("juneberry.jb_train")


def setup_args(parser) -> None:
    """
    Adds arguments to the parser
    :param parser: The parser in which to add arguments.
    """
    parser.add_argument('modelName', help='Name of the directory in models containing the \'config.json\' in '
                                          'workspace models directory.')
    parser.add_argument('--dryrun', default=False, action='store_true',
                        help='Flag to initiate dry run mode. ')
    # parser.add_argument('--nopaging', default=False, action='store_true',
    #                     help='Set to true to disable data set paging and load all at once.')
    parser.add_argument('-n', '--num-gpus', type=int, default=0,
                        help='The number of GPUs. By default use all. Set to 0 for CPU.')
    parser.add_argument('--onnx', default=False, action='store_true',
                        help='When possible, save the trained model in ONNX format.')
    parser.add_argument('--skipNative', default=False, action='store_true',
                        help='Tells the trainer not to save the trained model in its native format. This argument can '
                             'potentially be ignored if no other format is chosen to take the place of the native '
                             'format. Meaning when no format is specified, native will be chosen by default.')
    parser.add_argument('--resume', default=False, action='store_true',
                        help='If the trainer supports checkpointing, then this instructs the trainer to resume training'
                             'from the last checkpoint.')


def main():
    # Setup and parse all arguments.
    parser = argparse.ArgumentParser(description="Performs the training defined in a Juneberry model "
                                                 "configuration file.")
    setup_args(parser)
    jb_scripting_utils.setup_args(parser)
    train_args = parser.parse_args()

    sprout = TrainingSprout()
    sprout.grow_from_args(train_args)
    trainer = sprout.build_trainer_from_model_config()

    if trainer is None:
        logger.error("No Trainer instantiated for configuration. Exiting.")
    else:
        trainer.train_model()

    logger.info(f"jb_train is done.")


if __name__ == "__main__":
    jb_scripting_utils.run_main(main, logger)
