#! /usr/bin/env python3

# ======================================================================================================================
# Juneberry - General Release
#
# Copyright 2021 Carnegie Mellon University.
#
# NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS"
# BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER
# INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED
# FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM
# FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
#
# Released under a BSD (SEI)-style license, please see license.txt or contact permission@sei.cmu.edu for full terms.
#
# [DISTRIBUTION STATEMENT A] This material has been approved for public release and unlimited distribution.  Please see
# Copyright notice for non-US Government use and distribution.
#
# This Software includes and/or makes use of Third-Party Software subject to its own license.
#
# DM21-0884
#
# ======================================================================================================================

import argparse
import logging
import sys

from juneberry.config.model import ModelConfig
import juneberry.filesystem as jbfs
from juneberry.scripting.sprout import TrainingSprout
import juneberry.scripting.utils as jb_scripting_utils
import juneberry.training.utils as jb_training_utils

logger = logging.getLogger("juneberry.jb_train")


def setup_args(parser) -> None:
    """
    Adds arguments to the parser
    :param parser: The parser in which to add arguments.
    """
    parser.add_argument('modelName', help='Name of the directory in models containing the \'config.json\' in '
                                          'workspace models directory.')
    parser.add_argument('--dryrun', default=False, action='store_true',
                        help='Flag to initiate dry run mode. ')
    # parser.add_argument('--nopaging', default=False, action='store_true',
    #                     help='Set to true to disable data set paging and load all at once.')
    parser.add_argument('-n', '--num-gpus', type=int, default=0,
                        help='The number of GPUs. By default use all. Set to 0 for CPU.')
    parser.add_argument('--onnx', default=False, action='store_true',
                        help='When possible, save the trained model in ONNX format.')
    parser.add_argument('--skipNative', default=False, action='store_true',
                        help='Tells the trainer not to save the trained model in its native format. This argument can '
                             'potentially be ignored if no other format is chosen to take the place of the native '
                             'format. Meaning when no format is specified, native will be chosen by default.')
    parser.add_argument('--resume', default=False, action='store_true',
                        help='If the trainer supports checkpointing, then this instructs the trainer to resume training'
                             'from the last checkpoint.')


def main():
    # Setup and parse all arguments.
    parser = argparse.ArgumentParser(description="Performs the training defined in a Juneberry model "
                                                 "configuration file.")
    setup_args(parser)
    jb_scripting_utils.setup_args(parser)
    train_args = parser.parse_args()

    sprout = TrainingSprout()
    sprout.grow_from_args(train_args)
    sprout.set_model_config()
    trainer = sprout.get_trainer()

    # TODO: Now to redo the trainers so their inits only takes kwargs and
    #  probably shove required trainer components into the sprout.

    sys.exit(1)

    # The model manager helps us find all the files and directories
    model_manager = jbfs.ModelManager(train_args.modelName)
    model_manager.setup()

    model_config = ModelConfig.load(model_manager.get_model_config())
    trainer = jb_training_utils.build_trainer(model_config, train_args)

    if trainer is None:
        logger.error("No Trainer instantiated for configuration. Exiting.")
        sys.exit(-1)

    if train_args.dryrun:
        trainer.dry_run()
    else:
        # Allocate the GPUs the user asked for, getting the current number if None are required.
        trainer.num_gpus = trainer.check_gpu_availability(trainer.lab.profile.num_gpus)

        if trainer.lab.profile.max_gpus is not None:
            if trainer.num_gpus > trainer.lab.profile.max_gpus:
                logger.info(f"Maximum numbers of GPUs {trainer.num_gpus} being capped to {trainer.lab.profile.max_gpus} "
                            f"because of lab profile.")
                trainer.num_gpus = trainer.lab.profile.max_gpus

        # No matter the number of GPUs, setup the node for training
        trainer.node_setup()

        # Set the number of GPUs and kick it off
        if trainer.num_gpus == 0:
            trainer.train_model()
        elif trainer.num_gpus == 1:
            # With one GPU we just run on the GPU in this process
            trainer.train_model(0)
        else:
            trainer.train_distributed(trainer.num_gpus)

    logger.info(f"jb_train is done.")


if __name__ == "__main__":
    jb_scripting_utils.run_main(main, logger)
