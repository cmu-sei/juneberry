#! /usr/bin/env python3

# ======================================================================================================================
# Juneberry - General Release
#
# Copyright 2021 Carnegie Mellon University.
#
# NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS"
# BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER
# INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED
# FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM
# FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
#
# Released under a BSD (SEI)-style license, please see license.txt or contact permission@sei.cmu.edu for full terms.
#
# [DISTRIBUTION STATEMENT A] This material has been approved for public release and unlimited distribution.  Please see
# Copyright notice for non-US Government use and distribution.
#
# This Software includes and/or makes use of Third-Party Software subject to its own license.
#
# DM21-0884
#
# ======================================================================================================================

"""
Script that runs an experiment (set of models) with corresponding test sets to make evaluations then
a set of reports.

"""

import argparse
from functools import partial
import logging
from pathlib import Path
import sys

# Utilities
import juneberry.filesystem as jbfs
from juneberry.lab import Lab
import juneberry.scripting as jbscripting
import juneberry.workflow as jbworkflow

logger = logging.getLogger("juneberry.jb_run_experiment")


def remove_for_regen(file_path: Path, commit) -> None:
    """
    Removes the file at the path if it exists and logs it.
    :param file_path: The file to check for and remove
    :param commit: Boolean indicating whether or not to actually remove the file.
    :return: None
    """
    if file_path.exists():
        if commit:
            logger.info(f"Removing {file_path} to ensure it gets regenerated.")
            file_path.unlink()
        else:
            logger.info(f"Would remove {file_path} so that it gets regenerated.")


def setup_args(parser) -> None:
    """
    Adds arguments to the parser
    :param parser: The parser in which to add arguments.
    """
    parser.add_argument("experimentName", help="Name of the experiment in the experiments directory.")
    parser.add_argument("--commit", "-X", default=False, action="store_true",
                        help="Add this flag to execute the task. Otherwise the experiment will run in preview mode.")
    parser.add_argument("--clean", "-C", default=False, action="store_true",
                        help="Clean the model, predictions and work files. Also requires --commit for results.")
    parser.add_argument("--dryrun", "-D", default=False, action="store_true",
                        help="Apply --dryrun to to see a description of what execution would look like without actually"
                             "executing. Also requires --commit for results.")
    parser.add_argument("--showcmd", "-S", default=False, action="store_true",
                        help="Set to true to show the command we execute or would execute.")
    parser.add_argument("--rules", default=False, help="Path to custom rules.json file.")
    parser.add_argument("--processes", "-N", type=int, default=None,
                        help="This argument will override the default experiment behavior for jb_train, which uses all "
                             "available GPUs for a single jb_train. Instead, this argument launches an instance of "
                             "jb_train that uses N GPUs, so multiple models can be trained in parallel.")
    parser.add_argument("--regen", "-R", default=False, action="store_true",
                        help="When this argument is provided, any existing experiment config or rules files will be "
                             "deleted and regenerated.")


def main():
    parser = argparse.ArgumentParser(description="Train a set of models, run a set of tests against them and produce "
                                                 "a series of outputs into the experimentName directory. NOTE: By "
                                                 "default this script reports what it WOULD do but does not perform "
                                                 "any action. See --commit. NOTE: This script executes other scripts "
                                                 "in the same directory. ARGS NOTE: Any command line args that are not "
                                                 "recognized as positional or optional args for jb_run_experiment will "
                                                 "be passed to the pydoit command.")

    setup_args(parser)
    jbscripting.setup_args(parser)
    args, unknown = parser.parse_known_args()
    show_command = args.showcmd

    experiment_manager = jbfs.ExperimentManager(args.experimentName)
    log_file = experiment_manager.get_log_path(args.dryrun)

    # Set up the workspace, logging and general environment
    lab = jbscripting.setup_workspace(
        args,
        log_file=log_file,
        log_prefix="<<PREVIEW>> " if args.dryrun else "<<LIVE>> ",
        banner_msg=f">>> Juneberry Experiment Runner {args.experimentName} <<<")

    # Find bin directory
    bin_dir = Path(__file__).parent.absolute()
    logger.info(f"Using bin directory: {bin_dir}")

    # Generate appropriate dodo.py file for the workflow
    workflow = "dryrun" if args.dryrun else "main"

    # Determine the location of the experiment outline file.
    exp_creator = jbfs.ExperimentCreator(args.experimentName)
    outline_path = Path(exp_creator.get_experiment_outline())

    # If a regen was requested, try to delete the experiment config, rules file, and main_dodo file so
    # they get regenerated.
    if args.regen:
        logger.info(f"Regeneration requested. Deleting files...")

        remove_for_regen(Path(experiment_manager.get_experiment_config()), args.commit)
        remove_for_regen(Path(experiment_manager.get_experiment_rules()), args.commit)
        remove_for_regen(Path(experiment_manager.get_experiment_dodo(workflow)), args.commit)

        if not args.commit and not args.clean:
            sys.exit(0)

    # Generate experiment config.json
    config_path = experiment_manager.get_experiment_config()
    if not config_path.exists() and outline_path.exists():
        logger.info(f"config.json in experiment {args.experimentName} not found.")
        logger.info(f"Generating experiment config.json file for {args.experimentName}.")
        jbworkflow.run_command(
            dependencies=[],
            args=[bin_dir / "jb_generate_experiments", args.experimentName],
            show_command=show_command,
        )

    # Generate a rules.json from an experiment config.
    rules_path = experiment_manager.get_experiment_rules()
    if not rules_path.exists() and config_path.exists():
        logger.info(f"rules.json in experiment {args.experimentName} not found.")
        logger.info(f"Generating experiment rules.json file for {args.experimentName}.")
        jbworkflow.run_command(
            dependencies=[],
            args=[bin_dir / "jb_experiment_to_rules", args.experimentName],
            show_command=show_command,
        )

    # Alternative method to generate rules.json using an attack config.
    attack_mgr = jbfs.AttackManager(args.experimentName)
    attack_path = attack_mgr.get_experiment_attack_file()
    if not rules_path.exists() and attack_path.exists():
        logger.info(f"rules.json in experiment {args.experimentName} not found.")
        logger.info(f"Generating experiment rules.json file for {args.experimentName} using the attack config.")
        jbworkflow.run_command(
            dependencies=[],
            args=[bin_dir / "jb_attack_to_rules", args.experimentName],
            show_command=show_command)

    dodo_path = experiment_manager.get_experiment_dodo(workflow)
    if not dodo_path.exists():
        logger.info(f"{workflow}_dodo.py in experiment {args.experimentName} not found.")
        logger.info(f"Generating experiment {workflow}_dodo.py file for {args.experimentName}.")
        cmd_args = [bin_dir / "jb_rules_to_pydoit", args.experimentName, workflow]
        if args.processes and args.processes > 0:
            cmd_args.append('--parallel')
        jbworkflow.run_command(dependencies=[], args=cmd_args, show_command=show_command)

    # Develop pydoit command
    cmd_args = ["python", "-m", "doit", "-d", str(lab.workspace()), "-f", str(dodo_path.resolve())]

    # If they specify the number of processes we should show it
    if args.processes and args.commit and not args.clean:
        cmd_args.extend(['-n', args.processes])

    # Clean mode
    if args.clean:
        if args.commit:
            logger.info(f"Cleaning the {workflow.upper()} workflow for {args.experimentName}")
            cmd_args.append("clean")

        else:
            logger.info("The following tasks would be cleaned:")
            cmd_args.append("list")
            cmd_args.append("-s")

    # Execution mode
    else:
        if args.commit:
            logger.info(f"Executing {workflow.upper()} workflow for {args.experimentName}.")

        else:
            logger.info("The following tasks could be executed, check status:")
            logger.info("R: run, U: up-to-date, I: ignored")
            cmd_args.append("list")
            cmd_args.append("-s")

    # Save the db file for pydoit to the experiment directory.
    db_path = str(experiment_manager.get_experiment_db_file())
    cmd_args.extend(['--db-file', db_path])

    # If there were any args that jb_run_experiment didn't recognize, log them and add them
    # to the pydoit command.
    if unknown:
        logger.warning(f"jb_run_experiment did not recognize the following args: {unknown}")
        logger.warning(f"Attempting to pass these arg(s) to the pydoit command.")
        for arg in unknown:
            cmd_args.append(arg)

    # Run PyDoit command
    jbworkflow.run_command(dependencies=[], args=cmd_args, show_command=show_command)
    if not args.commit:
        logger.info("Add --commit or -X to execute changes.")

    # Lastly, remove rules.json and dodo.py files
    if args.commit and args.clean:
        if rules_path.exists():
            logger.info("Removing " + str(rules_path))
            rules_path.unlink()
        if dodo_path.exists():
            logger.info("Removing " + str(dodo_path))
            dodo_path.unlink()

    logger.info("jb_run_experiment is done.")


if __name__ == "__main__":
    main()
